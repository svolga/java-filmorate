
DROP TABLE IF EXISTS user_friends;
DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS mpas;

CREATE TABLE IF NOT EXISTS users
(
    user_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email      varchar(255) NOT NULL,
    login      varchar(32)  NOT NULL,
    name       varchar(64)         NOT NULL,
    birthday   date                NOT NULL,
    updated_at timestamp           NOT NULL DEFAULT (now())
);

CREATE TABLE IF NOT EXISTS user_friends
(
    user_id    integer   NOT NULL,
    friend_id  integer   NOT NULL,
    updated_at timestamp NOT NULL DEFAULT (now()),
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(255) NOT NULL,
    description  text,
    release_date date         NOT NULL,
    duration     integer      NOT NULL,
    rate         double,
    mpa_id    integer,
    updated_at   timestamp    NOT NULL DEFAULT (now())
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       varchar(16) UNIQUE NOT NULL,
    updated_at timestamp          NOT NULL DEFAULT (now())
);

CREATE TABLE IF NOT EXISTS film_genres
(
    film_id    integer   NOT NULL,
    genre_id   integer   NOT NULL,
    updated_at timestamp NOT NULL DEFAULT (now()),
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS mpas
(
    mpa_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       varchar(8) UNIQUE NOT NULL,
    updated_at timestamp         NOT NULL DEFAULT (now())
);

CREATE TABLE IF NOT EXISTS likes
(
    user_id    integer   NOT NULL,
    film_id    integer   NOT NULL,
    updated_at timestamp NOT NULL DEFAULT (now()),
    PRIMARY KEY (user_id, film_id)
);

ALTER TABLE user_friends
    ADD FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE user_friends
    ADD FOREIGN KEY (friend_id) REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE film_genres
    ADD FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE film_genres
    ADD FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE CASCADE ON UPDATE NO ACTION;

--ALTER TABLE film
--    ADD FOREIGN KEY (mpa_id) REFERENCES mpa (mpa_id) ON DELETE SET NULL ON UPDATE NO ACTION;


ALTER TABLE `likes`
    ADD FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE `likes`
    ADD FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE NO ACTION;

